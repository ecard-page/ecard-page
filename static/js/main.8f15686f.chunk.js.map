{"version":3,"sources":["app/SinglePropertyInput.tsx","util/toBinary.ts","app/SetupForm.tsx","app/Card.tsx","util/fromBinary.ts","app/QrCode.tsx","app/Footer.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["SinglePropertyInput","handleChange","index","type","onChange","e","target","value","toBinary","codeUnits","Uint16Array","length","i","charCodeAt","btoa","String","fromCharCode","Uint8Array","buffer","SetupForm","useState","label","formValue","setFormValue","field","onSubmit","event","preventDefault","encoded","JSON","stringify","window","location","replace","origin","map","_","onClick","push","Card","listItems","data","className","fromBinary","binary","atob","bytes","QrCode","dataUrl","setDataUrl","expanded","setExpanded","toggleExpand","useCallback","useEffect","qr","href","then","toDataURL","CTAMessage","cn","src","alt","Footer","App","React","info","setInfo","console","log","params","URLSearchParams","document","search","get","parse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6LAqBeA,MAhBf,YACoF,IAA9EC,EAA6E,EAA7EA,aAAcC,EAA+D,EAA/DA,MAGlB,OAAO,gCACL,uBACIC,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAIJ,EAAaI,EAAEC,OAAOC,MAAO,QAASL,MAEzD,uBACIC,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAIJ,EAAaI,EAAEC,OAAOC,MAAO,QAASL,UCR9CM,EARE,SAACD,GAEhB,IADA,IAAME,EAAY,IAAIC,YAAYH,EAAMI,QAC/BC,EAAI,EAAGA,EAAIH,EAAUE,OAAQC,IACpCH,EAAUG,GAAKL,EAAMM,WAAWD,GAElC,OAAOE,KAAKC,OAAOC,aAAP,MAAAD,OAAM,YAAiB,IAAIE,WAAWR,EAAUS,YC8B/CC,MA9Bf,WAAsB,IAAD,EAEeC,mBAAmB,CAAC,CAACC,MAAO,GAAId,MAAO,MAFtD,mBAEZe,EAFY,KAEDC,EAFC,KAUbtB,EAAe,SAACM,EAAeiB,EAAwBtB,GAC3DoB,EAAUpB,GAAOsB,GAASjB,EAC1BgB,EAAaD,IAWf,OAAO,uBAAMG,SAnBQ,SAACC,GACpBA,EAAMC,iBACN,IAAMC,EAAUpB,EAASqB,KAAKC,UAAUR,IACxCS,OAAOC,SAASC,QAAhB,UAA2BF,OAAOC,SAASE,OAA3C,iBAA0DN,KAgBrD,UAHoBN,EAAUa,KAAI,SAACC,EAAGlC,GAAJ,OACrC,cAAC,EAAD,CAAiCD,aAAcA,EAAcC,MAAOA,GAA1CA,MAI5B,wBAAQC,KAAK,SAASkC,QAVE,WACxBf,EAAUgB,KAAK,CAACjB,MAAO,GAAId,MAAO,KAClCgB,EAAa,YAAID,KAQjB,0BACA,uBAAOnB,KAAK,SAASI,MAAM,eCZhBgC,MAff,YAA6C,IAErCC,EAFoC,EAA5BC,KAESN,KAAI,gBAAGd,EAAH,EAAGA,MAAOd,EAAV,EAAUA,MAAV,OACzB,sBAAKmC,UAAU,cAAf,UACE,sBAAMA,UAAU,oBAAhB,SAAqCrB,IACrC,sBAAMqB,UAAU,oBAAhB,SAAqCnC,MAFLA,MAMpC,OAAO,gCACL,wBAAQ8B,QAAS,kBAAMN,OAAOC,SAASC,QAAQF,OAAOC,SAASE,SAA/D,sBACA,qBAAKQ,UAAU,eAAf,SAA+BF,QCNpBG,EATI,SAACf,GAGlB,IAFA,IAAMgB,EAASb,OAAOc,KAAKjB,GACrBkB,EAAQ,IAAI7B,WAAW2B,EAAOjC,QAC3BC,EAAI,EAAGA,EAAIkC,EAAMnC,OAAQC,IAChCkC,EAAMlC,GAAKgC,EAAO/B,WAAWD,GAE/B,OAAOG,OAAOC,aAAP,MAAAD,OAAM,YAAiB,IAAIL,YAAYoC,EAAM5B,W,yBCqBvC6B,MAvBf,WAAmB,IAAD,EACc3B,mBAAS,IADvB,mBACT4B,EADS,KACAC,EADA,OAEgB7B,oBAAS,GAFzB,mBAET8B,EAFS,KAECC,EAFD,KAIVC,EAAeC,uBAAY,WAC/BF,GAAaD,KACZ,CAACA,EAAUC,IAEdG,qBAAU,WACRC,WAAYxB,OAAOC,SAASwB,MACzBC,MAAK,SAAClD,GAAD,OAA8B0C,EAAW1C,EAAMmD,kBACtD,CAACT,IAEJ,IAAMU,EAAaT,EAAW,gBAAkB,cAEhD,OACE,sBAAKR,UAAWkB,IAAG,SAAU,CAAC,SAAYV,IAAYb,QAASe,EAA/D,UACE,qBAAKS,IAAKb,EAASc,IAAI,WACvB,8BAAMH,QCXGI,MAPf,WAEE,OAAO,iCACL,cAAC,EAAD,OCsBWC,MAnBf,WAAgB,IAAD,EAEWC,IAAM7C,SAAmB,IAFpC,mBAEN8C,EAFM,KAEAC,EAFA,KAWb,OARAC,QAAQC,IAAI7D,EALG,yHAOfyD,IAAMX,WAAU,WACd,IAAMgB,EAAS,IAAIC,gBAAgBC,SAASxC,SAASyC,QAC/ChC,EAAOE,EAAW2B,EAAOI,IAAI,SAAW,IAC9CP,EAAQtC,KAAK8C,MAAMlC,GAAQ,SAC1B,IAGD,sBAAKC,UAAU,MAAf,UACGwB,EAAKvD,OAAS,cAAC,EAAD,CAAM8B,KAAMyB,IAAU,cAAC,EAAD,IACpCA,EAAKvD,OAAS,cAAC,EAAD,IAAa,SCVnBiE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFd,SAASe,eAAe,SAM1BX,M","file":"static/js/main.8f15686f.chunk.js","sourcesContent":["import React from 'react';\n\nexport type SinglePropertyType = { label: string, value: string };\nexport type HandleChangeCallback = (value: string, field: 'label'|'value', index: number) => void\n\nfunction SinglePropertyInput(\n    { handleChange, index }: { handleChange: HandleChangeCallback, index: number}) {\n\n\n  return <div>\n    <input\n        type=\"text\"\n        onChange={e => handleChange(e.target.value, 'label', index)}\n    />\n    <input\n        type=\"text\"\n        onChange={e => handleChange(e.target.value, 'value', index)}\n    />\n  </div>;\n}\n\nexport default SinglePropertyInput;\n","const toBinary = (value: string): string => {\n  const codeUnits = new Uint16Array(value.length);\n  for (let i = 0; i < codeUnits.length; i++) {\n    codeUnits[i] = value.charCodeAt(i);\n  }\n  return btoa(String.fromCharCode(...new Uint8Array(codeUnits.buffer) as any));\n}\n\nexport default toBinary;\n","import React, { useState } from 'react';\nimport SinglePropertyInput from './SinglePropertyInput';\nimport { InfoType } from './App';\nimport toBinary from '../util/toBinary';\n\nfunction SetupForm() {\n\n  const [formValue, setFormValue] = useState<InfoType>([{label: '', value: ''}]);\n\n  const handleSubmit = (event: Event) => {\n    event.preventDefault();\n    const encoded = toBinary(JSON.stringify(formValue));\n    window.location.replace(`${window.location.origin}?info=${encoded}`)\n  }\n\n  const handleChange = (value: string, field: 'label'|'value', index: number) => {\n    formValue[index][field] = value;\n    setFormValue(formValue);\n  }\n\n  const handleAddProperty = () => {\n    formValue.push({label: '', value: ''});\n    setFormValue([...formValue]);\n  }\n\n  const getInputList = () => formValue.map((_, index) =>\n      <SinglePropertyInput key={index} handleChange={handleChange} index={index}/>)\n\n  return <form onSubmit={handleSubmit as any}>\n    {getInputList()}\n    <button type=\"button\" onClick={handleAddProperty}>Add property</button>\n    <input type=\"submit\" value=\"Submit\" />\n  </form>;\n}\n\nexport default SetupForm;\n","import React from 'react';\nimport { InfoType } from './App';\nimport QrCode from './QrCode';\n\nfunction Card({ data }: { data: InfoType }) {\n\n  const listItems = data.map(({ label, value }) =>\n    <div className=\"propertyRow\" key={value}>\n      <span className=\"propertyRow-label\">{label}</span>\n      <span className=\"propertyRow-value\">{value}</span>\n    </div>\n  );\n\n  return <div>\n    <button onClick={() => window.location.replace(window.location.origin)}>New Card</button>\n    <div className=\"propertyList\">{listItems}</div>\n  </div>;\n}\n\nexport default Card;\n","const fromBinary = (encoded: string): string => {\n  const binary = window.atob(encoded)\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  return String.fromCharCode(...new Uint16Array(bytes.buffer) as any);\n}\n\nexport default fromBinary;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport * as qr from 'qrcode';\nimport cn from \"classnames\";\n\nfunction QrCode() {\n  const [dataUrl, setDataUrl] = useState('');\n  const [expanded, setExpanded] = useState(false);\n\n  const toggleExpand = useCallback(() => {\n    setExpanded(!expanded);\n  }, [expanded, setExpanded]);\n\n  useEffect(() => {\n    qr.toCanvas(window.location.href)\n      .then((value: HTMLCanvasElement) => setDataUrl(value.toDataURL()));\n  }, [setDataUrl])\n\n  const CTAMessage = expanded ? \"Tap to unzoom\" : \"Tap to zoom\";\n\n  return (\n    <div className={cn(\"qrcode\", {\"expanded\": expanded})} onClick={toggleExpand}>\n      <img src={dataUrl} alt=\"qrcode\"/>\n      <div>{CTAMessage}</div>\n    </div>\n  );\n}\n\nexport default QrCode;\n","import React from 'react';\nimport { InfoType } from './App';\nimport QrCode from './QrCode';\n\nfunction Footer() {\n\n  return <footer>\n    <QrCode/>\n  </footer>;\n}\n\nexport default Footer;\n","import React from 'react';\nimport SetupForm from './SetupForm';\nimport Card from './Card';\nimport toBinary from '../util/toBinary';\nimport fromBinary from '../util/fromBinary';\nimport Footer from './Footer';\n\nexport type InfoType = { label: string, value: string }[];\nconst testData = '[{\"label\":\"Imię\",\"value\":\"Jaś\"},{\"label\":\"Nazwisko\",\"value\":\"Kapela\"},{\"label\":\"NIP\",\"value\":\"123456789\"}]'\n\nfunction App() {\n\n  const [info, setInfo] = React.useState<InfoType>([]);\n  console.log(toBinary(testData));\n\n  React.useEffect(() => {\n    const params = new URLSearchParams(document.location.search);\n    const data = fromBinary(params.get('info') || '');\n    setInfo(JSON.parse(data || '[]'));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {info.length ? <Card data={info}/> : <SetupForm/>}\n      {info.length ? <Footer /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}