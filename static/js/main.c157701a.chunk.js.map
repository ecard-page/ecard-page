{"version":3,"sources":["components/molecules/LabelValueCell.tsx","app/SinglePropertyInput.tsx","util/toBinary.ts","components/molecules/FooterWrapper.tsx","components/molecules/LabelValueCellWrapper.tsx","app/SetupForm.tsx","app/QrCode.tsx","app/Card.tsx","util/fromBinary.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["LabelValueCellContainer","styled","div","removeInputStyles","sharedInputStyles","LabelValueCellLabel","span","LabelValueCellValue","LabelValueCell","label","value","SinglePropertyInput","handleChange","index","type","placeholder","onChange","e","target","toBinary","codeUnits","Uint16Array","length","i","charCodeAt","btoa","String","fromCharCode","Uint8Array","buffer","FooterWrapper","footer","LabelValueCellWrapper","sharedSzpachla","Baton","button","Imput","input","SetupForm","useState","formValue","setFormValue","field","onSubmit","event","preventDefault","encoded","JSON","stringify","window","location","replace","origin","map","_","onClick","push","QrCode","dataUrl","setDataUrl","expanded","setExpanded","toggleExpand","useCallback","useEffect","qr","href","then","toDataURL","CTAMessage","className","cn","src","alt","Card","listItems","data","fromBinary","binary","atob","bytes","App","React","info","setInfo","console","log","params","URLSearchParams","document","search","get","parse","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c157701a.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\ntype LabelValueCellProps = {\n  label: string | JSX.Element;\n  value: string | JSX.Element;\n};\n\nconst LabelValueCellContainer = styled.div`\n  position: relative;\n  width: calc(100vw - 20px);\n  background: var(--background-lighter);\n  margin-bottom: 7px;\n  display: flex;\n  flex-direction: column;\n  padding: 6px 6px 8px 6px;\n`;\n\nconst removeInputStyles = `\n  border: none;\n`;\n\nconst sharedInputStyles = `\n  border-radius: 5px;\n  max-width: 100%;\n`;\n\nconst LabelValueCellLabel = styled.span`\n  &, & > input {\n    font-size: 14px;\n    ${removeInputStyles}\n  }\n  & > input {\n    ${sharedInputStyles}\n  }\n`;\n\nconst LabelValueCellValue = styled.span`\n  &, & > input {\n    font-size: 24px;\n    margin: 2px 5px 0px 5px;\n    ${removeInputStyles}\n  }\n  & > input {\n    ${sharedInputStyles}\n  }\n`;\n\nconst LabelValueCell = ({\n  label,\n  value\n}: LabelValueCellProps) => (\n  <LabelValueCellContainer>\n    <LabelValueCellLabel>{label}</LabelValueCellLabel>\n    <LabelValueCellValue>{value}</LabelValueCellValue>\n  </LabelValueCellContainer>\n);\n\nexport default LabelValueCell;\n","import React from 'react';\nimport LabelValueCell from \"../components/molecules/LabelValueCell\";\n\nexport type SinglePropertyType = { label: string, value: string };\nexport type HandleChangeCallback = (value: string, field: 'label'|'value', index: number) => void\n\nfunction SinglePropertyInput(\n    { handleChange, index }: { handleChange: HandleChangeCallback, index: number}) {\n\n\n  return <LabelValueCell\n    label={<input\n        type=\"text\"\n        placeholder=\"Name\"\n        onChange={e => handleChange(e.target.value, 'label', index)}\n    />}\n    value={<input\n        type=\"text\"\n        placeholder=\"Value\"\n        onChange={e => handleChange(e.target.value, 'value', index)}\n    />}\n  />;\n}\n\nexport default SinglePropertyInput;\n","const toBinary = (value: string): string => {\n  const codeUnits = new Uint16Array(value.length);\n  for (let i = 0; i < codeUnits.length; i++) {\n    codeUnits[i] = value.charCodeAt(i);\n  }\n  return btoa(String.fromCharCode(...new Uint8Array(codeUnits.buffer) as any));\n}\n\nexport default toBinary;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst FooterWrapper = styled.footer`\n  position: fixed;\n  width: 100vw;\n  bottom: 0;\n  padding: 12px 0 7px 0;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  background: var(--background-darker);\n`;\n\nexport default FooterWrapper;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst LabelValueCellWrapper = styled.div`\n  margin-top: 10px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default LabelValueCellWrapper;\n","import React, { useState } from 'react';\nimport SinglePropertyInput from './SinglePropertyInput';\nimport { InfoType } from './App';\nimport toBinary from '../util/toBinary';\nimport FooterWrapper from \"../components/molecules/FooterWrapper\";\nimport LabelValueCellWrapper from \"../components/molecules/LabelValueCellWrapper\";\n\n// <szpachla> (do zaorania)\nimport styled from \"styled-components\";\nconst sharedSzpachla = `\n  padding: 20px 15px;\n  border: 0px solid transparent;\n  margin: 15px;\n  border-radius: 20px;\n  cursor: pointer;\n`;\nconst Baton = styled.button`\n ${sharedSzpachla}\n`;\nconst Imput = styled.input`\n  ${sharedSzpachla}\n`;\n// </szpachla>\n\n\nfunction SetupForm() {\n\n  const [formValue, setFormValue] = useState<InfoType>([{label: '', value: ''}]);\n\n  const handleSubmit = (event: Event) => {\n    event.preventDefault();\n    const encoded = toBinary(JSON.stringify(formValue));\n    window.location.replace(`${window.location.origin}?info=${encoded}`)\n  }\n\n  const handleChange = (value: string, field: 'label'|'value', index: number) => {\n    formValue[index][field] = value;\n    setFormValue(formValue);\n  }\n\n  const handleAddProperty = () => {\n    formValue.push({label: '', value: ''});\n    setFormValue([...formValue]);\n  }\n\n  const getInputList = () => formValue.map((_, index) =>\n      <SinglePropertyInput key={index} handleChange={handleChange} index={index}/>)\n\n  return <form onSubmit={handleSubmit as any}>\n    <LabelValueCellWrapper>\n      {getInputList()}\n    </LabelValueCellWrapper>\n    \n    <FooterWrapper>\n      <Baton type=\"button\" onClick={handleAddProperty}>Add property</Baton>\n      <Imput type=\"submit\" value=\"Submit\" />\n    </FooterWrapper>\n  </form>;\n}\n\nexport default SetupForm;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport * as qr from 'qrcode';\nimport cn from \"classnames\";\n\nfunction QrCode() {\n  const [dataUrl, setDataUrl] = useState('');\n  const [expanded, setExpanded] = useState(false);\n\n  const toggleExpand = useCallback(() => {\n    setExpanded(!expanded);\n  }, [expanded, setExpanded]);\n\n  useEffect(() => {\n    qr.toCanvas(window.location.href)\n      .then((value: HTMLCanvasElement) => setDataUrl(value.toDataURL()));\n  }, [setDataUrl])\n\n  const CTAMessage = expanded ? \"Tap to unzoom\" : \"Tap to zoom\";\n\n  return (\n    <div className={cn(\"qrcode\", {\"expanded\": expanded})} onClick={toggleExpand}>\n      <img src={dataUrl} alt=\"qrcode\"/>\n      <div>{CTAMessage}</div>\n    </div>\n  );\n}\n\nexport default QrCode;\n","import React from 'react';\nimport { InfoType } from './App';\nimport QrCode from './QrCode';\nimport FooterWrapper from \"../components/molecules/FooterWrapper\";\nimport LabelValueCell from \"../components/molecules/LabelValueCell\";\nimport LabelValueCellWrapper from \"../components/molecules/LabelValueCellWrapper\";\n\nfunction Card({ data }: { data: InfoType }) {\n  const listItems = data.map(({ label, value }, index) => (\n    <LabelValueCell key={`cell-${index}`} label={label} value={value} />\n  ));\n\n  return <>\n    <div>\n      <button onClick={() => window.location.replace(window.location.origin)}>New Card</button>\n      <LabelValueCellWrapper>{listItems}</LabelValueCellWrapper>\n    </div>\n    <FooterWrapper>\n      <QrCode/>\n    </FooterWrapper>\n  </>;\n}\n\nexport default Card;\n","const fromBinary = (encoded: string): string => {\n  const binary = window.atob(encoded)\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  return String.fromCharCode(...new Uint16Array(bytes.buffer) as any);\n}\n\nexport default fromBinary;\n","import React from 'react';\nimport SetupForm from './SetupForm';\nimport Card from './Card';\nimport toBinary from '../util/toBinary';\nimport fromBinary from '../util/fromBinary';\n\nexport type InfoType = { label: string, value: string }[];\nconst testData = '[{\"label\":\"Imię\",\"value\":\"Jaś\"},{\"label\":\"Nazwisko\",\"value\":\"Kapela\"},{\"label\":\"NIP\",\"value\":\"123456789\"}]'\n\nfunction App() {\n  const [info, setInfo] = React.useState<InfoType>([]);\n  console.log(toBinary(testData));\n\n  React.useEffect(() => {\n    const params = new URLSearchParams(document.location.search);\n    const data = fromBinary(params.get('info') || '');\n    setInfo(JSON.parse(data || '[]'));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {info.length ? <Card data={info}/> : <SetupForm/>}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}